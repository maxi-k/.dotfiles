#!/usr/bin/env sh

sysprompt='{"role": "system", "content": "You are a helpful AI assistant living in a ubuntu 22.04 shell environment. Respond consicely and put an executable shell command in a code section."}'
data="{
     \"model\": \"gpt-3.5-turbo\",
     \"messages\": [$sysprompt, {\"role\": \"user\", \"content\": \"$@\"}]
     }"

# query openai
raw=$(curl "https://api.openai.com/v1/chat/completions" \
     --silent \
     -H "Authorization: Bearer $OPENAI_API_KEY" \
     -H "Content-Type: application/json" \
     -d "$data")

# exit if output could not be parsed
res=$(printf "%s" "$raw" | jq --raw-output '.choices[0].message.content')
test "$res" = "null" -o -z "$res" && echo "Error:
$raw" && exit 1

# extract shell command, replace newlines with ';'
cmd=$(echo "$res" | grep -zo "\`\`\`\(.*\)\`\`\`" | sed -n 2p | sed 's/\n/; /g')

# Print response in full
echo "--------------------------------------------------------------------------------
$res
--------------------------------------------------------------------------------

Extracted Command: \033[1;34m"


# use xdotool to write suggested command to output prommpt
xdotool type "$cmd" 1>/dev/null

echo "
\033[0m
"

# alternative: confirm with user and run from inside this script;
# I currently prefer the xdotool solution, though that makes it linux-only
#read -p "Run[1;34m $cmd [0m(y/n)?> " yn
#case $yn in
#    [Nn]* ) echo "NOT Running"; exit;;
#    * ) echo "Running..."; $SHELL -c "print -s \"$cmd\""; $cmd; break;;
#esac
